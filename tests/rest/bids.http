### Get all bids of a user
GET {{protocol}}{{host}}:{{port}}/users/djimi2992@outlook.com/bids
Authorization: Bearer {{admin_token}}

> {%
    client.test(
        "Get all bids of specific user",
        function () {
            client.assert(response.status === 200, "Failed to get list of bids");
        }
    )
%}

### Get all bids of a user - bad weather - authorization
GET {{protocol}}{{host}}:{{port}}/users/djimi2992@outlook.com/bids

> {%
    client.test(
        "Get all bids of specific user",
        function () {
            client.assert(response.status === 500, `Expected error status 500 when getting bids of user, but received ${response.status}`);
        }
    )
%}

### Get all bids for an antique
GET {{protocol}}{{host}}:{{port}}/antiques/1/bids

> {%
    client.test(
        "Get all bids of specific antique",
        function () {
            client.assert(response.status === 200, "Failed to get list of bids");
        }
    )
%}

### Get all winnings for a user
GET {{protocol}}{{host}}:{{port}}/users/user@user.com/winners
Authorization: Bearer {{user_token}}

> {%
    client.test(
        "Get all winning bids for a specific user",
        function () {
            client.assert(response.status === 200, "Failed to get list of winning bids");
        }
    )
%}

### Get all winnings for a user - bad weather - authorization
GET {{protocol}}{{host}}:{{port}}/users/djimi2992@outlook.com/winners

> {%
    client.test(
        "Get all winning bids for a specific user",
        function () {
            client.assert(response.status === 500, `Expected error status 500 when getting winning bids of user, but received ${response.status}`);
        }
    )
%}


### Place a new bid for an antique
POST {{protocol}}{{host}}:{{port}}/antiques/1/bids
Content-Type: application/json
Authorization: Bearer {{user_token}}

{
  "amount": 1000,
  "dateTime": "1698911678638",
  "userEmail": "user@user.com",
  "antiqueId": "1"
}

> {%
    client.test(
        "Create new bid for an antique",
        function () {
            client.assert(response.status === 201, "Failed to create bid");
            const bid = JSON.parse(request.body());
            client.assert(bid.amount === 1000, "Amount variable not assigned correctly");
            client.assert(bid.dateTime === "1698911678638", "DateTime variable not assigned correctly");
            client.assert(bid.userEmail === "user@user.com", "UserEmails variable not assigned correctly");
            client.assert(bid.antiqueId === "1", "AntiqueId variable not assigned correctly");
        }
    )
%}

### Place a new bid for an antique - bad weather
POST {{protocol}}{{host}}:{{port}}/antiques/1/bids
Content-Type: application/json
Authorization: Bearer {{user_token}}

{
  "amount": -1

}

> {%
    client.test(
        "Create new bid for an antique",
        function () {
            client.assert(response.status === 404, `Expected response code 404 when placing a bid, but received ${response.status}`);
        }
    )
%}

### Place a new bid for an antique - bad weather - authorization
POST {{protocol}}{{host}}:{{port}}/antiques/1/bids
Content-Type: application/json

{
  "amount": 1000,
  "dateTime": "1698911678638",
  "userEmail": "user@user.com",
  "antiqueId": "1"
}

> {%
    client.test(
        "Create new bid for an antique",
        function () {
            client.assert(response.status === 500, `Expected error status 500 when placing a bid, but received ${response.status}`);
        }
    )
%}

### Delete a bid from antique auction
DELETE {{protocol}}{{host}}:{{port}}/antiques/1/bids/1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

> {%
    client.test(
        "Delete bid for antique",
        function () {
            client.assert(response.status === 200, "Failed to delete the bid");
        }
    )
%}

### Delete a bid - bad weather
DELETE {{protocol}}{{host}}:{{port}}/antiques/1/bids/-1
Content-Type: application/json
Authorization: Bearer {{admin_token}}

> {%
    client.test(
        "Delete bid for antique auction",
        function () {
            client.assert(response.status === 404, `Expected error code 404 when deleting bid, but received ${response.status}`);
        }
    )
%}

### Delete a bid - bad weather - authorization
DELETE {{protocol}}{{host}}:{{port}}/antiques/1/bids/1
Content-Type: application/json
Authorization: Bearer {{user_token}}

> {%
    client.test(
        "Delete bid for antique auction",
        function () {
            client.assert(response.status === 401, `Expected error status 401 when getting bids of user, but received ${response.status}`);
        }
    )
%}