### Get all the users
GET {{protocol}}{{host}}:{{port}}/users
Authorization: Bearer {{admin_token}}

> {%
    client.test(
        "Get all users",
        function () {
            client.assert(response.status === 200, "Failed to get list of users");
        }
    )
%}


### Get a specific user based on email
GET {{protocol}}{{host}}:{{port}}/users/djimi2992@outlook.com
Accept: application/json
Authorization: Bearer {{admin_token}}

> {%
    client.test(
        "Get specific user",
        function () {
            client.assert(response.status === 200, "Failed to get user, as user with that email is not found");
        }
    )
%}

### Get a specific user based on email - bad weather
GET {{protocol}}{{host}}:{{port}}/users/-1
Accept: application/json
Authorization: Bearer {{admin_token}}

> {%
    client.test(
        "Get specific user",
        function () {
            client.assert(response.status === 404, "Expected error code 404, but received 200");
        }
    )
%}

### Get a specific user based on email - bad weather - unathorized
GET {{protocol}}{{host}}:{{port}}/users/djimi2992@outlook.com
Accept: application/json
Authorization: Bearer {{user_token}}

> {%
    client.test(
        "Get specific user",
        function () {
            client.assert(response.status === 401, `Expected error code 401 when getting user, but received ${response.status}`);
        }
    )
%}

### Create a new user
POST {{protocol}}{{host}}:{{port}}/users
Content-Type: application/json


{
  "username": "kevin",
  "email": "kevin@kevin.com",
  "password": "111111",
  "isAdmin": false
}

> {%
    client.test(
        "Create new user",
        function () {
            client.assert(response.status === 201, "Failed to create user");
            const user = JSON.parse(request.body());
            client.assert(user.username === "kevin", "Username variable not assigned correctly");
            client.assert(user.email === "kevin@kevin.com", "Email variable not assigned correctly");
            client.assert(user.password === "111111", "Password variable not assigned correctly");
            client.assert(user.isAdmin === false, "IsAdmin variable not assigned correctly");
        }
    )
%}

### Create a new user - bad weather
POST {{protocol}}{{host}}:{{port}}/users
Content-Type: application/json
Authorization: Bearer {{admin_token}}

{
  "username": -1,
  "email": "s",
  "password": "111111",
  "isAdmin": false
}

> {%
    client.test(
        "Create new user",
        function () {
            client.assert(response.status === 400, "Expected response code 400, but received 201");

        }
    )
%}
